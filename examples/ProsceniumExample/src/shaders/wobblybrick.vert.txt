uniform vec3 LightPosition;           
const float SpecularContribution = 0.3;
const float DiffuseContribution  = 1.0 - SpecularContribution;
varying float LightIntensity;
varying vec2  MCposition;
uniform float time;
uniform vec4 wobblefactor;

void main()
{
    vec3 ecPosition = vec3(gl_ModelViewMatrix * gl_Vertex);
    vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);
    vec3 lightVec   = normalize(LightPosition - ecPosition);
    vec3 reflectVec = reflect(-lightVec, tnorm);
    vec3 viewVec    = normalize(-ecPosition);
    float diffuse   = max(dot(lightVec, tnorm), 0.0);
    float spec      = 0.0;
    
    if (diffuse > 0.0)
    {
        spec = max(dot(reflectVec, viewVec), 0.0);
        spec = pow(spec, 16.0);
    }
    
    LightIntensity  = max(0.2, DiffuseContribution * diffuse + SpecularContribution * spec);
    
    MCposition      = gl_Vertex.xy;

    vec4 inp = gl_Vertex;
    inp += sin((inp.zxyw + time) * 3) * wobblefactor;

    gl_Position = gl_ModelViewProjectionMatrix * inp;
}