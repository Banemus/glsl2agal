<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2012 Adobe Systems Incorporated

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--> 
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	
	width="100%" height="100%" frameRate="120" backgroundColor="0x333333"
	
	skinClass="TransparentApplicationSkin"
	applicationComplete="applicationCompleteHandler( event )"
	>
	<fx:Script>
		<![CDATA[
			import com.adobe.scenegraph.*;
			
			import flash.display.*;
			import flash.events.*;
			
			import spark.components.BorderContainer;
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.core.*;
			import spark.layouts.HorizontalLayout;
			
			// ======================================================================
			//	Properties
			// ----------------------------------------------------------------------
			protected var st:GLSLShaderTester;
			protected var _sphere:SceneMesh;
			
			// ======================================================================
			//	Methods
			// ----------------------------------------------------------------------
			protected function applicationCompleteHandler( event:Event ):void
			{
				st = new GLSLShaderTester(newShaderCallback);
				st.addEventListener( Event.COMPLETE, completeEventHandler );
				stage.addEventListener( Event.RESIZE, resizeEventHandler );
				
				st.mouseParent = this.viewport;
				st.viewport = this.viewport;
				stage.addChildAt( st, 0 );
			}
			
			protected function completeEventHandler( event:Event ):void
			{
				trace( st.scene );
				st.addEventListener( Event.ENTER_FRAME, enterFrameEventHandler );
			}
			
			protected function enterFrameEventHandler( event:Event ):void
			{
			}
			
			protected function resizeEventHandler( event:Event = undefined ):void
			{
				if ( st && stage )
					st.resize( stage.stageWidth, stage.stageHeight ); 
			}
			
			protected function clickHandler( event:MouseEvent ):void
			{
			}
			protected var curvs:Object;
			protected var curfs:Object;
			protected var curmat:MaterialCustomGLSL;
			
			
			protected function newShaderCallback(vsj:Object, fsj:Object, mat:MaterialCustomGLSL):void {
				uilayer.removeAllElements();
				curmat = mat;
				var s:String;
				var cur:Vector.<Number>;
				var widget:vec4entry;
				
				for(s in vsj.varnames) {
					if(vsj.storage[vsj.varnames[s]] != "ir_var_uniform"
						|| s.indexOf("hoisted_const") == 0
						|| s.indexOf("gl_") == 0)
						continue;
					
					widget = new vec4entry();
					widget.varname.text = s;
					widget.mat = curmat;
					widget.isVS = true;
					
					cur = mat.vertShaderValues[s] as Vector.<Number>;
					if(cur) {
						widget.c0.value = cur[0];
						widget.c1.value = cur[1];
						widget.c2.value = cur[2];
						widget.c3.value = cur[3];
					}
						
					uilayer.addElement(widget);
				}
				
				for(s in fsj.varnames) {
					if(fsj.storage[fsj.varnames[s]] != "ir_var_uniform"
						|| s.indexOf("hoisted_const") == 0
						|| s.indexOf("gl_") == 0)
						continue;
					
					widget = new vec4entry();
					widget.varname.text = s;
					widget.mat = curmat;
					widget.isVS = false;
					uilayer.addElement(widget);
					
					cur = mat.fragShaderValues[s] as Vector.<Number>;
					if(cur) {
						widget.c0.value = cur[0];
						widget.c1.value = cur[1];
						widget.c2.value = cur[2];
						widget.c3.value = cur[3];
					}
				}
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<fx:Component className="vec4entry">
			<s:Group>
				<fx:Script>
					<![CDATA[
						import com.adobe.scenegraph.MaterialCustomGLSL;
						public var mat:MaterialCustomGLSL;
						public var isVS:Boolean = false;
						
						public function formatNum(i:Number) : String 
						{
							return i.toFixed(2);
						}
						
						public function changed(e:*):void 
						{
							if(isVS) {
								mat.vertShaderValues[varname.text] = Vector.<Number>([c0.value, c1.value, c2.value, c3.value]);
							} else {
								mat.fragShaderValues[varname.text] = Vector.<Number>([c0.value, c1.value, c2.value, c3.value]);
							}
						}
					]]>
				</fx:Script>
				<s:layout>  
					<s:HorizontalLayout />  
				</s:layout>
				<s:Label text="varname" id="varname"/>
				<s:Spacer width="100%" />
				<s:NumericStepper  id="c0"  width="100" value="0" valueFormatFunction="formatNum" stepSize="0.05" maximum="999999" minimum="-999999" valueCommit="changed(event)"/>
				<s:NumericStepper  id="c1"  width="100" value="0" valueFormatFunction="formatNum" stepSize="0.05" maximum="999999" minimum="-999999" valueCommit="changed(event)"/>
				<s:NumericStepper  id="c2"  width="100" value="0" valueFormatFunction="formatNum" stepSize="0.05" maximum="999999" minimum="-999999" valueCommit="changed(event)"/>
				<s:NumericStepper  id="c3"  width="100" value="0" valueFormatFunction="formatNum" stepSize="0.05" maximum="999999" minimum="-999999" valueCommit="changed(event)"/>
			</s:Group>
		</fx:Component>
	</fx:Declarations>
	
		<s:Group id="viewport" x="0" y="0" width="100%" height="100%" resize="resizeEventHandler( event )">
		</s:Group>
	<s:Group width="100" height="100%" id="uilayer">
		<s:layout>  
			<s:VerticalLayout />  
		</s:layout>  
	</s:Group>
</s:Application>